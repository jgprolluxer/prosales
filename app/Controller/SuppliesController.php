<?php

App::uses('AppController', 'Controller');

/**
 * Supplies Controller
 *
 * @property Supply $Supply
 * @property PaginatorComponent $Paginator
 */
class SuppliesController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator', 'Session');

    /**
     * index method
     *
     * @return void
     */
    public function index() {
        $this->Supply->recursive = 0;
        $this->set('supplies', $this->Paginator->paginate());
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Supply->exists($id)) {
            throw new NotFoundException(__('Invalid supply'));
        }
        $options = array('conditions' => array('Supply.' . $this->Supply->primaryKey => $id));
        $this->set('supply', $this->Supply->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Supply->create();
            if ($this->Supply->save($this->request->data)) {
                $this->Session->setFlash(__('The supply has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash(__('The supply could not be saved. Please, try again.'));
            }
        }
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Supply->exists($id)) {
            throw new NotFoundException(__('Invalid supply'));
        }
        if ($this->request->is(array('post', 'put'))) {
            if ($this->Supply->save($this->request->data)) {
                $this->Session->setFlash(__('The supply has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash(__('The supply could not be saved. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Supply.' . $this->Supply->primaryKey => $id));
            $this->request->data = $this->Supply->find('first', $options);
        }
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Supply->id = $id;
        if (!$this->Supply->exists()) {
            throw new NotFoundException(__('Invalid supply'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->Supply->delete()) {
            $this->Session->setFlash(__('The supply has been deleted.'));
        } else {
            $this->Session->setFlash(__('The supply could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

    /**
     * JSON API method
     * generated by mcred/Cakeular Plugin
     *
     * @link          https://github.com/mcred/Cakeular
     *
     * @return void
     * @throws exception
     */
    public function api($id = null) {
        Configure::write('debug', 0);
        $this->autoRender = false;
        $this->layout = 'ajax';


        $response = array(
            'success' => false,
            'message' => 'No Action',
            'xData' => array()
        );

        switch ($this->request->method()) {
            case 'GET':
                if (!$id) {
                    if (isset($this->request->query["parent_field"]) && isset($this->request->query["parent_value"])) {
                        try {
                            $parentField = $this->request->query["parent_field"];
                            $parentValue = $this->request->query["parent_value"];

                            $this->Account->recursive = -1;
                            $orders = $this->Account->find('all', array(
                                'conditions' => array(
                                    'Account.' . $parentField . ' LIKE ' => '%' . $parentValue . '%'
                                )
                            ));

                            $response = array(
                                'success' => true,
                                'message' => 'OK',
                                'xData' => $orders
                            );
                            echo json_encode($response);
                            return;
                        } catch (Exception $ex) {
                            $response = array(
                                'success' => false,
                                'message' => $ex->getMessage(),
                                'xData' => array()
                            );
                            echo json_encode($response);
                            return;
                        }
                    } else {
                        $orders = $this->Account->find('all', array());
                        $response = array(
                            'success' => true,
                            'message' => 'OK',
                            'xData' => $orders
                        );
                        echo json_encode($response);
                        return;
                    }
                } elseif (!$this->Account->exists($id)) {
                    $response = array(
                        'success' => false,
                        'message' => __('El cliente no fue encontrado'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                } else {
                    $order = $this->Account->find('first', array('conditions' => array('Account.' . $this->Account->primaryKey => $id)));
                    $response = array(
                        'success' => true,
                        'message' => 'OK',
                        'xData' => $order
                    );
                    echo json_encode($response);
                    return;
                }
                break;
            case 'POST':
                if (!isset($this->request->data['body'])) {
                    $response = array(
                        'success' => false,
                        'message' => __('Los datos del POST no fueron encontrados'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                }
                $this->Account->create();
                try {
                    if ($this->Account->save($this->request->data['body'])) {
                        $order = $this->Account->read(null, $this->Account->getLastInsertID());

                        $response = array(
                            'success' => true,
                            'message' => __('El cliente fue guardado'),
                            'xData' => $order
                        );
                        echo json_encode($response);
                        return;
                    } else {
                        $response = array(
                            'success' => false,
                            'message' => __('El cliente no fue guardado'),
                            'xData' => $this->Account->validationErrors
                        );
                        echo json_encode($response);
                        return;
                    }
                } catch (Exception $ex) {
                    $response = array(
                        'success' => false,
                        'message' => $ex->getMessage(),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                }
                break;
            case 'PUT':
                if (!$id) {
                    $response = array(
                        'success' => false,
                        'message' => __('EL parametro ID no fue encontrado'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                    break;
                }
                if (!isset($this->request->data['body'])) {
                    $response = array(
                        'success' => false,
                        'message' => __('Los datos del POST no fueron encontrados'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                    break;
                }
                try {
                    if ($this->Account->save($this->request->data['body'])) {
                        $order = $this->Account->read(null, $this->request->data['body']["id"]);
                        $response = array(
                            'success' => true,
                            'message' => __('El cliente fue actualizado'),
                            'xData' => $order
                        );
                        echo json_encode($response);
                        return;
                    } else {
                        $response = array(
                            'success' => false,
                            'message' => __('El cliente no fue guardado'),
                            'xData' => $this->Account->validationErrors
                        );
                        echo json_encode($response);
                        return;
                    }
                } catch (Exception $ex) {
                    $response = array(
                        'success' => false,
                        'message' => $ex->getMessage(),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                }
                break;
            case 'DELETE':
                if (!$id) {
                    $response = array(
                        'success' => false,
                        'message' => __('EL parametro ID no fue encontrado'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                }
                $this->Account->id = $id;
                if ($this->Account->delete()) {
                    $response = array(
                        'success' => true,
                        'message' => __('El cliente fue eliminado'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                } else {
                    $response = array(
                        'success' => true,
                        'message' => __('El cliente no fue eliminado'),
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
                }
                break;
            default:
                $response = array(
                    'success' => false,
                    'message' => 'Invalid Request Method',
                    'xData' => array()
                );
                echo json_encode($response);
                return;
        }
    }

}
