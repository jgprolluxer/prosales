<?php
App::uses('AppController', 'Controller');
/**
 * ProductSupplies Controller
 *
 * @property ProductSupply $ProductSupply
 * @property PaginatorComponent $Paginator
 */
class ProductSuppliesController extends AppController {

/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator', 'Session', 'DataTable', 'Navigation');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->ProductSupply->recursive = 0;
		$this->set('productSupplies', $this->Paginator->paginate());
	}


	public function jsindex($productID = null)
	{
		$this->autoRender = false;
		$this->layout = 'ajax';

		$arrayConditions = array(
			'ProductSupply.id >=' => 1
		);
		
		if(null !== $productID)
		{
			$arrayConditions = array(
				'ProductSupply.id >=' => 1,
				'Product.id =' => $productID
			);
		} else {
			$arrayConditions = array(
				'ProductSupply.id >=' => 1
			);
		}

		$this->paginate = array(
			'fields' => array(
				'ProductSupply.id',
				'Supply.name',
				'ProductSupply.uomqty',
				"CONCAT('<a href=\"" . Router::url("/ProductSupplies/view/") . "', ProductSupply.id, '\" class=\"btn btn-xs btn-info\">', '<i class=\"fa fa-eye fa-fw\"></i>' ,'</a>') as supplyview",
			),
			'conditions' => $arrayConditions
		);

		$this->DataTable->fields = array(
			'ProductSupply.id',
			'Supply.name',
			'ProductSupply.uomqty',
			'0.supplyview',
		);

		$this->DataTable->filterFields = array(
			'ProductSupply.id',
			'Supply.name',
			'ProductSupply.uomqty',
		);

		echo json_encode($this->DataTable->getResponse());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->ProductSupply->exists($id)) {
			throw new NotFoundException(__('Invalid product supply'));
		}
		$options = array('conditions' => array('ProductSupply.' . $this->ProductSupply->primaryKey => $id));
                $this->request->data = $this->ProductSupply->find('first', $options);
                $products = $this->ProductSupply->Product->read(null, $this->request->data["Product"]["id"]);
                $supplies = $this->ProductSupply->Supply->find('list');
                $supplyName = $supplies[$id];
		$this->set(compact('productSupply', $this->ProductSupply->find('first', $options), 'products', 'supplyName'));
	}

/**
 * add method
 *
 * @return void
 */
	public function add($productID = null)
	{
		if(!$productID)
		{
			throw new NotFoundException(__('Invalid product'));
		}
		if ($this->request->is('post')) {
			$this->ProductSupply->create();
			if ($this->ProductSupply->save($this->request->data)) {
				$this->Session->setFlash(__('The product supply has been saved.'));
				return $this->redirect(array('controller' => 'Products', 'action' => 'view', $productID));
			} else {
				$this->Session->setFlash(__('The product supply could not be saved. Please, try again.'));
			}
		}
		$products = $this->ProductSupply->Product->read(null, $productID);
		$supplies = $this->ProductSupply->Supply->find('list');
		$this->set(compact('products', 'supplies'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null)
	{
		if (!$this->ProductSupply->exists($id)) {
			throw new NotFoundException(__('Invalid product supply'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->ProductSupply->save($this->request->data)) {
				$this->Session->setFlash(__('The product supply has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The product supply could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('ProductSupply.' . $this->ProductSupply->primaryKey => $id));
			$this->request->data = $this->ProductSupply->find('first', $options);
		}
		$products = $this->ProductSupply->Product->read(null, $this->request->data["Product"]["id"]);
		$supplies = $this->ProductSupply->Supply->find('list');
		$this->set(compact('products', 'supplies'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->ProductSupply->id = $id;
		if (!$this->ProductSupply->exists()) {
			throw new NotFoundException(__('Invalid product supply'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->ProductSupply->delete()) {
			$this->Session->setFlash(__('The product supply has been deleted.'));
		} else {
			$this->Session->setFlash(__('The product supply could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
	
	    
    /**
		 * JSON API method
		 * generated by mcred/Cakeular Plugin
		 *
		 * @link          https://github.com/mcred/Cakeular
		 *
		 * @return void
		 * @throws exception
		 */
		public function api($id = null)
		{
            Configure::write('debug', 0);
            $this->autoRender = false;
            $this->layout = 'ajax';
            
            
            $response = array(
                'success' => false,
                'message' => 'No Action',
                'xData' => array()
            );

			switch ($this->request->method())
			{
				case 'GET':
					if (!$id)
					{
						if( isset($this->request->query["parent_field"]) && isset($this->request->query["parent_value"]) )
						{
							try {
								$parentField = $this->request->query["parent_field"];
								$parentValue = $this->request->query["parent_value"];

								$this->Account->recursive = -1;
								$orders = $this->Account->find('all', array(
									'conditions' => array(
										'Account.'. $parentField . ' LIKE ' => '%' . $parentValue . '%'
									)
								));
								
                                $response = array(
                                    'success' => true,
                                    'message' => 'OK',
                                    'xData' => $orders
                                );
								echo json_encode($response);
								return;
							}
							catch(Exception $ex)
							{
                                $response = array(
                                    'success' => false,
                                    'message' => $ex->getMessage(),
                                    'xData' => array()
                                );
                                echo json_encode($response);
                                return;
							}
						} 
						else {
						    $orders = $this->Account->find('all', array());
                            $response = array(
                                'success' => true,
                                'message' => 'OK',
                                'xData' => $orders
                            );
							echo json_encode($response);
							return;
						}

					} elseif(!$this->Account->exists($id))
					{
                        $response = array(
                            'success' => false,
                            'message' => __('El cliente no fue encontrado'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					} else
					{
						$order = $this->Account->find('first', array('conditions' => array('Account.' . $this->Account->primaryKey => $id)));
                        $response = array(
                            'success' => true,
                            'message' => 'OK',
                            'xData' => $order
                        );
                        echo json_encode($response);
                        return;
					}
					break;
				case 'POST':
					if(!isset($this->request->data['body']))
					{
                        $response = array(
                            'success' => false,
                            'message' => __('Los datos del POST no fueron encontrados'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					}
					$this->Account->create();
					try
					{
						if ( $this->Account->save( $this->request->data['body'] ) )
						{
						    $order = $this->Account->read(null, $this->Account->getLastInsertID());
							
                            $response = array(
                                'success' => true,
                                'message' => __('El cliente fue guardado'),
                                'xData' => $order
                            );
                            echo json_encode($response);
                            return;
                            
						} else
						{
                            $response = array(
                                'success' => false,
                                'message' => __('El cliente no fue guardado'),
                                'xData' => $this->Account->validationErrors
                            );
                            echo json_encode($response);
                            return;
						}
					}
					catch(Exception $ex)
					{
                        $response = array(
                            'success' => false,
                            'message' => $ex->getMessage(),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					}					
					break;
				case 'PUT':
					if(!$id)
					{
                        $response = array(
                            'success' => false,
                            'message' => __('EL parametro ID no fue encontrado'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
						break;
					}
					if(!isset($this->request->data['body']))
					{
                        $response = array(
                            'success' => false,
                            'message' => __('Los datos del POST no fueron encontrados'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
						break;
					}
					try {
						if ( $this->Account->save( $this->request->data['body'] ) )
						{
						    $order = $this->Account->read(null, $this->request->data['body']["id"]);
                            $response = array(
                                'success' => true,
                                'message' => __('El cliente fue actualizado'),
                                'xData' => $order
                            );
                            echo json_encode($response);
                            return;
						} else
						{
                            $response = array(
                                'success' => false,
                                'message' => __('El cliente no fue guardado'),
                                'xData' => $this->Account->validationErrors
                            );
                            echo json_encode($response);
                            return;
						}
					}
					catch(Exception $ex)
					{
                        $response = array(
                            'success' => false,
                            'message' => $ex->getMessage(),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					}					
					break;
				case 'DELETE':
					if(!$id)
					{
                        $response = array(
                            'success' => false,
                            'message' => __('EL parametro ID no fue encontrado'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					}
					$this->Account->id = $id;
					if ($this->Account->delete())
					{
                        $response = array(
                            'success' => true,
                            'message' => __('El cliente fue eliminado'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					} else
					{
                        $response = array(
                            'success' => true,
                            'message' => __('El cliente no fue eliminado'),
                            'xData' => array()
                        );
                        echo json_encode($response);
                        return;
					}
					break;
				default:
                    $response = array(
                        'success' => false,
                        'message' => 'Invalid Request Method',
                        'xData' => array()
                    );
                    echo json_encode($response);
                    return;
			}
		}
}
